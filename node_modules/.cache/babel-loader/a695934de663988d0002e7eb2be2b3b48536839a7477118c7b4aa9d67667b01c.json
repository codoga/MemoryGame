{"ast":null,"code":"import React,{Component}from'react';import{connect}from'react-redux';import{flipCard,matchCards,resetGame}from'../actions';import Card from'./Card';import{jsxs as _jsxs,jsx as _jsx}from\"react/jsx-runtime\";class PlayGround extends Component{constructor(){super(...arguments);this.handleClick=(name,index)=>{const{openedFrameworks,flipCard,matchCards}=this.props;if(openedFrameworks.length===2){setTimeout(matchCards,750);}else{flipCard(name,index);if(openedFrameworks.length===1){setTimeout(matchCards,750);}}};this.restartGame=()=>{this.start();};}componentDidMount(){this.start();}start(){let duplicatedFrameworks=this.props.frameworks.concat(this.props.frameworks);let randomizedFrameworks=this.shuffle(duplicatedFrameworks);let finalizedFrameworks=randomizedFrameworks.map(name=>({name,close:true,complete:false}));this.props.resetGame(finalizedFrameworks);}shuffle(array){let currentIndex=array.length,temporaryValue,randomIndex;while(0!==currentIndex){randomIndex=Math.floor(Math.random()*currentIndex);currentIndex-=1;temporaryValue=array[currentIndex];array[currentIndex]=array[randomIndex];array[randomIndex]=temporaryValue;}return array;}render(){const{finalizedFrameworks,score}=this.props;return/*#__PURE__*/_jsxs(\"div\",{className:\"playground\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"score\",children:[\"Puan: \",score]}),/*#__PURE__*/_jsx(\"div\",{className:\"cards\",children:finalizedFrameworks.map((framework,index)=>/*#__PURE__*/_jsx(Card,{framework:framework.name,close:framework.close,complete:framework.complete,onClick:()=>this.handleClick(framework.name,index)},index))}),/*#__PURE__*/_jsx(\"button\",{className:\"restart-button\",onClick:this.restartGame,children:\"Yeniden Oyna\"})]});}}const mapStateToProps=state=>({finalizedFrameworks:state.finalizedFrameworks,openedFrameworks:state.openedFrameworks,score:state.score,frameworks:state.frameworks});const mapDispatchToProps={flipCard,matchCards,resetGame};export default connect(mapStateToProps,mapDispatchToProps)(PlayGround);","map":{"version":3,"names":["React","Component","connect","flipCard","matchCards","resetGame","Card","jsxs","_jsxs","jsx","_jsx","PlayGround","constructor","arguments","handleClick","name","index","openedFrameworks","props","length","setTimeout","restartGame","start","componentDidMount","duplicatedFrameworks","frameworks","concat","randomizedFrameworks","shuffle","finalizedFrameworks","map","close","complete","array","currentIndex","temporaryValue","randomIndex","Math","floor","random","render","score","className","children","framework","onClick","mapStateToProps","state","mapDispatchToProps"],"sources":["C:/Users/GuVeNBiL/OneDrive/Desktop/Card Game/my-card-game/src/components/PlayGround.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { flipCard, matchCards, resetGame } from '../actions';\r\nimport Card from './Card';\r\n\r\nclass PlayGround extends Component {\r\n  componentDidMount() {\r\n    this.start();\r\n  }\r\n\r\n  handleClick = (name, index) => {\r\n    const { openedFrameworks, flipCard, matchCards } = this.props;\r\n\r\n    if (openedFrameworks.length === 2) {\r\n      setTimeout(matchCards, 750);\r\n    } else {\r\n      flipCard(name, index);\r\n\r\n      if (openedFrameworks.length === 1) {\r\n        setTimeout(matchCards, 750);\r\n      }\r\n    }\r\n  };\r\n\r\n  start() {\r\n    let duplicatedFrameworks = this.props.frameworks.concat(this.props.frameworks);\r\n    let randomizedFrameworks = this.shuffle(duplicatedFrameworks);\r\n    let finalizedFrameworks = randomizedFrameworks.map((name) => ({\r\n      name,\r\n      close: true,\r\n      complete: false,\r\n    }));\r\n\r\n    this.props.resetGame(finalizedFrameworks);\r\n  }\r\n\r\n  shuffle(array) {\r\n    let currentIndex = array.length,\r\n      temporaryValue,\r\n      randomIndex;\r\n\r\n    while (0 !== currentIndex) {\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex -= 1;\r\n\r\n      temporaryValue = array[currentIndex];\r\n      array[currentIndex] = array[randomIndex];\r\n      array[randomIndex] = temporaryValue;\r\n    }\r\n\r\n    return array;\r\n  }\r\n\r\n  restartGame = () => {\r\n    this.start();\r\n  };\r\n\r\n  render() {\r\n    const { finalizedFrameworks, score } = this.props;\r\n\r\n    return (\r\n      <div className=\"playground\">\r\n        <div className=\"score\">Puan: {score}</div>\r\n        <div className=\"cards\">\r\n          {finalizedFrameworks.map((framework, index) => (\r\n            <Card\r\n              key={index}\r\n              framework={framework.name}\r\n              close={framework.close}\r\n              complete={framework.complete}\r\n              onClick={() => this.handleClick(framework.name, index)}\r\n            />\r\n          ))}\r\n        </div>\r\n        <button className=\"restart-button\" onClick={this.restartGame}>\r\n          Yeniden Oyna\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  finalizedFrameworks: state.finalizedFrameworks,\r\n  openedFrameworks: state.openedFrameworks,\r\n  score: state.score,\r\n  frameworks: state.frameworks,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  flipCard,\r\n  matchCards,\r\n  resetGame,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayGround);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}