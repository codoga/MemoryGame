{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GuVeNBiL\\\\OneDrive\\\\Desktop\\\\Card Game\\\\my-card-game\\\\src\\\\components\\\\PlayGround.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { flipCard, matchCards, resetGame } from '../actions';\nimport Card from './Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass PlayGround extends Component {\n  constructor(...args) {\n    super(...args);\n    this.handleClick = (name, index) => {\n      const {\n        openedFrameworks,\n        flipCard,\n        matchCards\n      } = this.props;\n      if (openedFrameworks.length === 2) {\n        setTimeout(matchCards, 750);\n      } else {\n        flipCard(name, index);\n        if (openedFrameworks.length === 1) {\n          setTimeout(matchCards, 750);\n        }\n      }\n    };\n    this.restartGame = () => {\n      this.start();\n    };\n  }\n  componentDidMount() {\n    this.start();\n  }\n  start() {\n    let duplicatedFrameworks = this.props.frameworks.concat(this.props.frameworks);\n    let randomizedFrameworks = this.shuffle(duplicatedFrameworks);\n    let finalizedFrameworks = randomizedFrameworks.map(name => ({\n      name,\n      close: true,\n      complete: false\n    }));\n    this.props.resetGame(finalizedFrameworks);\n  }\n  shuffle(array) {\n    let currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n  }\n  render() {\n    const {\n      finalizedFrameworks,\n      score\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playground\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"score\",\n        children: [\"Puan: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cards\",\n        children: finalizedFrameworks.map((framework, index) => /*#__PURE__*/_jsxDEV(Card, {\n          framework: framework.name,\n          close: framework.close,\n          complete: framework.complete,\n          onClick: () => this.handleClick(framework.name, index)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"restart-button\",\n        onClick: this.restartGame,\n        children: \"Yeniden Oyna\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this);\n  }\n}\nconst mapStateToProps = state => ({\n  finalizedFrameworks: state.finalizedFrameworks,\n  openedFrameworks: state.openedFrameworks,\n  score: state.score,\n  frameworks: state.frameworks\n});\nconst mapDispatchToProps = {\n  flipCard,\n  matchCards,\n  resetGame\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayGround);","map":{"version":3,"names":["React","Component","connect","flipCard","matchCards","resetGame","Card","jsxDEV","_jsxDEV","PlayGround","constructor","args","handleClick","name","index","openedFrameworks","props","length","setTimeout","restartGame","start","componentDidMount","duplicatedFrameworks","frameworks","concat","randomizedFrameworks","shuffle","finalizedFrameworks","map","close","complete","array","currentIndex","temporaryValue","randomIndex","Math","floor","random","render","score","className","children","fileName","_jsxFileName","lineNumber","columnNumber","framework","onClick","mapStateToProps","state","mapDispatchToProps"],"sources":["C:/Users/GuVeNBiL/OneDrive/Desktop/Card Game/my-card-game/src/components/PlayGround.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { flipCard, matchCards, resetGame } from '../actions';\r\nimport Card from './Card';\r\n\r\nclass PlayGround extends Component {\r\n  componentDidMount() {\r\n    this.start();\r\n  }\r\n\r\n  handleClick = (name, index) => {\r\n    const { openedFrameworks, flipCard, matchCards } = this.props;\r\n\r\n    if (openedFrameworks.length === 2) {\r\n      setTimeout(matchCards, 750);\r\n    } else {\r\n      flipCard(name, index);\r\n\r\n      if (openedFrameworks.length === 1) {\r\n        setTimeout(matchCards, 750);\r\n      }\r\n    }\r\n  };\r\n\r\n  start() {\r\n    let duplicatedFrameworks = this.props.frameworks.concat(this.props.frameworks);\r\n    let randomizedFrameworks = this.shuffle(duplicatedFrameworks);\r\n    let finalizedFrameworks = randomizedFrameworks.map((name) => ({\r\n      name,\r\n      close: true,\r\n      complete: false,\r\n    }));\r\n\r\n    this.props.resetGame(finalizedFrameworks);\r\n  }\r\n\r\n  shuffle(array) {\r\n    let currentIndex = array.length,\r\n      temporaryValue,\r\n      randomIndex;\r\n\r\n    while (0 !== currentIndex) {\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex -= 1;\r\n\r\n      temporaryValue = array[currentIndex];\r\n      array[currentIndex] = array[randomIndex];\r\n      array[randomIndex] = temporaryValue;\r\n    }\r\n\r\n    return array;\r\n  }\r\n\r\n  restartGame = () => {\r\n    this.start();\r\n  };\r\n\r\n  render() {\r\n    const { finalizedFrameworks, score } = this.props;\r\n\r\n    return (\r\n      <div className=\"playground\">\r\n        <div className=\"score\">Puan: {score}</div>\r\n        <div className=\"cards\">\r\n          {finalizedFrameworks.map((framework, index) => (\r\n            <Card\r\n              key={index}\r\n              framework={framework.name}\r\n              close={framework.close}\r\n              complete={framework.complete}\r\n              onClick={() => this.handleClick(framework.name, index)}\r\n            />\r\n          ))}\r\n        </div>\r\n        <button className=\"restart-button\" onClick={this.restartGame}>\r\n          Yeniden Oyna\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  finalizedFrameworks: state.finalizedFrameworks,\r\n  openedFrameworks: state.openedFrameworks,\r\n  score: state.score,\r\n  frameworks: state.frameworks,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  flipCard,\r\n  matchCards,\r\n  resetGame,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayGround);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}